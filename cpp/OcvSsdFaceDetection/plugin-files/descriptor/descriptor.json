{
  "componentName": "OcvSsdFaceDetection",
  "componentVersion": "1.0",
  "middlewareVersion": "4.1.0",
  "sourceLanguage": "c++",
  "batchLibrary": "${MPF_HOME}/plugins/OcvFaceDetection/lib/libmpfOcvSsdFaceDetection.so",
  "environmentVariables": [
    {
      "name": "LD_LIBRARY_PATH",
      "value": "${MPF_HOME}/plugins/OcvSsdFaceDetection/lib:${LD_LIBRARY_PATH}"
    }
  ],
  "algorithm": {
    "name": "OCVSSD",
    "description": "Detects faces in images and videos using the Open Computer Vision (OCV) library.",
    "actionType": "DETECTION",
    "requiresCollection": {
      "states": []
    },
    "providesCollection": {
      "states": [
        "DETECTION",
        "DETECTION_FACE",
        "DETECTION_FACE_OCVSSD"
      ],
      "properties": [
        {
          "name": "DETECTION_CONFIDENCE_THRESHOLD",
          "description": "Minimum detection confidence value [0...1] needed to keep detection and start a track.",
          "type": "FLOAT",
          "defaultValue": "0.5"
        },
        {
          "name": "MIN_DETECTION_SIZE",
          "description": "Minimum bounding box dimension in pixels to keep detection and start a track.",
          "type": "INT",
          "defaultValue": "46"
        },
        {
          "name": "DETECTION_FRAME_INTERVAL",
          "description": "Controls which frames to perform detection on. Tracking is performed on skipped frames only using motion prediction. If set to a value <= 0 then an interval of 1 will be used, meaning that detection is performed on every frame. If set to N > 1, every N-1 frames will be skipped. This value is adjusted based on FRAME_INTERVAL. If FRAME_INTERVAL >= DETECTION_FRAME_INTERVAL, then FRAME_INTERVAL is used. Otherwise, floor(DETECTION_FRAME_INTERVAL / FRAME_INTERVAL) * FRAME_INTERVAL is used.",
          "type": "INT",
          "defaultValue": "0"
        },
        {
          "name": "TRACKING_MAX_IOU_DIST",
          "description": "Maximum intersection over union distance (1.0 - iou) =[0..1] between detections below which detection will be considered part of same track",
          "type": "FLOAT",
          "defaultValue": "0.5"
        },
        {
          "name": "TRACKING_MAX_FEATURE_DIST",
          "description": "Maximum distance in feature space (1.0 - cos similarity) = [0..1] between detections below which detection will be considered part of same track",
          "type": "FLOAT",
          "defaultValue": "0.25"
        },
        {
          "name": "TRACKING_MAX_FRAME_GAP",
          "description": "Maximum temporal distance (# of frames) between detection in a track.",
          "type": "INT",
          "defaultValue": "4"
        },
        {
          "name": "KF_DISABLED",
          "description": "Disables the use of motion prediction via Kalman filtering during tracking.",
          "type": "BOOLEAN",
          "defaultValue": "false"
        },
        {
          "name": "KF_RN",
          "description": "Bounding box detector noise standard deviations (in pixels) [center_x_noise_stdev, center_y_noise_stddev, width_noise_stdev, height_noise_stddev] for Kalman filter R",
          "type": "STRING",
          "defaultValue": " [ 6.0,6.0,6.0,6.0 ] "
        },
        {
          "name": "KF_QN",
          "description": "Bounding box motion model acceleration inaccuracies/noise (in pixels/sec^2) [center_x_acceleration_noise_stdev, center_y_acceleration_noise_stdev, width_acceleration_noise_stdev, height_acceleration_noise_stdev ] for Kalman filter Q",
          "type": "STRING",
          "defaultValue": " [10000.0, 10000.0, 1000.0, 1000.0] "
        },
        {
          "name": "CUDA_DEVICE_ID",
          "description": "CUDA device / GPU to use, -1 to only use CPU",
          "type": "INT",
          "defaultValue": "-1"
        },
        {
          "name": "FALLBACK_TO_CPU_WHEN_GPU_PROBLEM",
          "description": "if true will fallback to CPU only when GPU fails to initialize",
          "type": "BOOLEAN",
          "defaultValue": "true"
        }

      ]
    }
  },
  "actions": [
    {
      "name": "OCV SSD FACE DETECTION ACTION",
      "description": "Executes the OpenCV SSD face detection algorithm using the default parameters.",
      "algorithm": "OCVSSD",
      "properties": []
    },
    {
      "name": "OCV SSD FACE DETECTION (WITH AUTO-ORIENTATION) ACTION",
      "description": "Executes the OpenCV SSD face detection algorithm and rotates and/or flips media based on EXIF data or video metadata.",
      "algorithm": "FACECV",
      "properties": [
        {
          "name": "AUTO_ROTATE",
          "value": "true"
        },
        {
          "name": "AUTO_FLIP",
          "value": "true"
        }
      ]
    }
  ],
  "tasks": [
    {
      "name": "OCV SSD FACE DETECTION TASK",
      "description": "Performs OpenCV face detection.",
      "actions": [
        "OCV SSD FACE DETECTION ACTION"
      ]
    },
    {
      "name": "OCV SSD FACE DETECTION (WITH AUTO-ORIENTATION) TASK",
      "description": "Executes the OpenCV SSD face detection algorithm and rotates and/or flips media based on EXIF data or video metadata.",
      "actions": [
        "OCV SSD FACE DETECTION (WITH AUTO-ORIENTATION) ACTION"
      ]
    }
  ],
  "pipelines": [
    {
      "name": "OCV SSD FACE DETECTION PIPELINE",
      "description": "Performs OpenCV SSD face detection.",
      "tasks": [
        "OCV SSD FACE DETECTION TASK"
      ]
    },
    {
      "name": "OCV SSD FACE DETECTION (WITH MARKUP) PIPELINE",
      "description": "Performs OpenCV SSD face detection and marks up the results.",
      "tasks": [
        "OCV SSD FACE DETECTION TASK",
        "OCV GENERIC MARKUP TASK"
      ]
    },
    {
      "name": "OCV SSD FACE DETECTION (WITH MOG MOTION PREPROCESSOR) PIPELINE",
      "description": "Performs MOG motion preprocessing and OpenCV SSD face detection.",
      "tasks": [
        "MOG MOTION DETECTION PREPROCESSOR TASK",
        "OCV SSD FACE DETECTION TASK"
      ]
    },
    {
      "name": "OCV SSD FACE DETECTION (WITH SUBSENSE MOTION PREPROCESSOR) PIPELINE",
      "description": "Performs SuBSENSE motion preprocessing and OpenCV face detection.",
      "tasks": [
        "SUBSENSE MOTION DETECTION PREPROCESSOR TASK",
        "OCV SSD FACE DETECTION TASK"
      ]
    },
    {
      "name": "OCV SSD FACE DETECTION (WITH MOG MOTION PREPROCESSOR AND MARKUP) PIPELINE",
      "description": "Performs MOG motion preprocessing, OpenCV face detection, and markup.",
      "tasks": [
        "MOG MOTION DETECTION PREPROCESSOR TASK",
        "OCV SSD FACE DETECTION TASK",
        "OCV GENERIC MARKUP TASK"
      ]
    },
    {
      "name": "OCV SSD FACE DETECTION (WITH SUBSENSE MOTION PREPROCESSOR AND MARKUP) PIPELINE",
      "description": "Performs SuBSENSE motion preprocessing, OpenCV face detection, and markup.",
      "tasks": [
        "SUBSENSE MOTION DETECTION PREPROCESSOR TASK",
        "OCV SSD FACE DETECTION TASK",
        "OCV GENERIC MARKUP TASK"
      ]
    },
    {
      "name": "OCV SSD FACE DETECTION (WITH AUTO-ORIENTATION) PIPELINE",
      "description": "Executes the OpenCV face detection algorithm and rotates and/or flips media based on EXIF data or video metadata.",
      "tasks": [
        "OCV SSD FACE DETECTION (WITH AUTO-ORIENTATION) TASK"
      ]
    }
  ]
}
