#############################################################################
# NOTICE                                                                    #
#                                                                           #
# This software (or technical data) was produced for the U.S. Government    #
# under contract, and is subject to the Rights in Data-General Clause       #
# 52.227-14, Alt. IV (DEC 2007).                                            #
#                                                                           #
# Copyright 2020 The MITRE Corporation. All Rights Reserved.                #
#############################################################################

#############################################################################
# Copyright 2020 The MITRE Corporation                                      #
#                                                                           #
# Licensed under the Apache License, Version 2.0 (the "License");           #
# you may not use this file except in compliance with the License.          #
# You may obtain a copy of the License at                                   #
#                                                                           #
#    http://www.apache.org/licenses/LICENSE-2.0                             #
#                                                                           #
# Unless required by applicable law or agreed to in writing, software       #
# distributed under the License is distributed on an "AS IS" BASIS,         #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  #
# See the License for the specific language governing permissions and       #
# limitations under the License.                                            #
#############################################################################

ARG BUILD_REGISTRY
ARG BUILD_TAG=latest
FROM ${BUILD_REGISTRY}openmpf_cpp_component_build:${BUILD_TAG} as build_component

RUN yum -y install vim mlocate git openssl-devel wget curl-devel \
&& mkdir -p /home/mpf/component_build/plugin/TrtisDetection/models/ip_irv2_coco/1 \
&& wget --load-cookies /tmp/cookies.txt \
"https://docs.google.com/uc?export=download&confirm=$(\
wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate \
'https://docs.google.com/uc?export=download&id=1EVYe2RHs7g2A8E2KLjVUXp-TV_ndjdtn' -O- \
| sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')&id=1EVYe2RHs7g2A8E2KLjVUXp-TV_ndjdtn" \
-O /home/mpf/component_build/plugin/TrtisDetection/models/ip_irv2_coco/1/model.graphdef \
&& rm -rf /tmp/cookies.txt

# Install cares, protobuf, zlib, gRPC
WORKDIR /tmp

RUN git clone -b v1.20.0 https://github.com/grpc/grpc  && cd grpc && git submodule update --init --recursive \
&& mkdir -p /tmp/grpc/third_party/protobuf/cmake/build \
&& cd /tmp/grpc/third_party/protobuf/cmake/build \
&& cmake3 -DCMAKE_POSITION_INDEPENDENT_CODE=ON -Dprotobuf_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release .. \
&& make -j`nproc` \
&& make install \
&& cd /tmp/ \
&& rm -rf /tmp/grpc/third_party/protobuf \
&& mkdir -p /tmp/grpc/third_party/cares/cares/cmake/build \
&& cd /tmp/grpc/third_party/cares/cares/cmake/build \
&& cmake3 -DCMAKE_BUILD_TYPE=Release ../.. \
&& make -j`nproc` \
&& make install \
&& cd /tmp/ \
&& rm -rf /tmp/grpc/third_party/cares/cares \
&& rm -rf /tmp/grpc/third_party/zlib \
&& rm -rf /tmp/grpc/third_party/protobuf \
# build and install gRPC
&& mkdir -p /tmp/grpc/cmake/build \
&& cd /tmp/grpc/cmake/build \
&& cmake3 -DgRPC_INSTALL=ON \
          -DgRPC_BUILD_TESTS=OFF \
          -DgRPC_PROTOBUF_PROVIDER=package \
          -DgRPC_ZLIB_PROVIDER=package \
          -DgRPC_CARES_PROVIDER=package \
          -DgRPC_SSL_PROVIDER=package \
          -DCMAKE_BUILD_TYPE=Release ../.. \
&& make -j`nproc` \
&& make install \
&& cd /tmp/ \
&& rm -rf /tmp/grpc \
&& ldconfig

# Install AWS SDK for C++ so we can use S3 storage.
# Do this before installing newer curl.
RUN cd /tmp/ \
&& git clone https://github.com/aws/aws-sdk-cpp.git aws-sdk-cpp \
&& mkdir -p /tmp/aws-sdk-cpp/build \
&& cd /tmp/aws-sdk-cpp/build \
&& cmake3 -DCMAKE_BUILD_TYPE=Release \
         -DBUILD_ONLY="s3" \
         -DCURL_DIR=/usr/lib64/ \
         -DCMAKE_C_FLAGS="-Wno-unused-variable -Wno-unused-parameter" \
         -DCMAKE_CXX_FLAGS="-Wno-unused-variable -Wno-unused-parameter" .. \
&& make -j`nproc` \
&& make install \
&& cd /tmp/ \
&& rm -fr /tmp/aws-sdk-cpp

# Install curl
# Newer version needed for TRTIS.
RUN cd /tmp/ \
&& git clone -b curl-7_67_0 https://github.com/curl/curl.git \
&& cd curl \
&& mkdir build && cd build && cmake3 -DCMAKE_INSTALL_PREFIX:PATH=/usr/local -DBUILD_SHARED_LIBS=ON .. && make install \
&& cp /usr/local/lib64/libcurl.so /usr/local/lib/libcurl.so \
&& ldconfig

# Install TensorRT-Inference-Server client libs.
RUN cd /tmp/ \
&& git clone -b v1.7.0 https://github.com/NVIDIA/tensorrt-inference-server.git tensorrt-inference-server \
# Disable building TRTIS python client.
&& sed -i '/add_subdirectory(\.\.\/\.\.\/src\/clients\/python src\/clients\/python)/d' /tmp/tensorrt-inference-server/build/trtis-clients/CMakeLists.txt \
# Set version number.
&& sed -i 's/project (trtis-clients)/project(trtis-clients VERSION "0.0.0")/g' /tmp/tensorrt-inference-server/build/trtis-clients/CMakeLists.txt \
&& mkdir -p /tmp/tensorrt-inference-server/build/trtis-clients/build \
&& cd /tmp/tensorrt-inference-server/build/trtis-clients/build \
&& cmake3 -DCMAKE_INSTALL_PREFIX=/root/trtis -DCMAKE_PREFIX_PATH=/usr/lib64/ -DCURL_DIR=/usr/local/ .. \
&& make -j`nproc` \
&& make install \
&& cp /tmp/tensorrt-inference-server/src/core/constants.h /root/trtis/include/constants.h \
&& chmod 644 /root/trtis/include/constants.h \
&& echo '/root/trtis/lib/' > /etc/ld.so.conf.d/trtis.conf \
&& echo '/usr/local/lib'   > /etc/ld.so.conf.d/locallib.conf \
&& ldconfig \
# Fix bad header include references to 'src'.
&& find /root/trtis/include/ -type f -exec sed -i 's/#include "src\/clients\/c++\//#include "/g' {} \; \
&& find /root/trtis/include/ -type f -exec sed -i 's/#include "src\/core\//#include "/g' {} \; \
&& mkdir -p /root/trtis/cmake/ \
&& echo 'add_library(request SHARED IMPORTED) # or STATIC instead of SHARED'                  > /root/trtis/cmake/request-config.cmake \
&& echo 'set_target_properties(request PROPERTIES'                                           >> /root/trtis/cmake/request-config.cmake \
&& echo '                              IMPORTED_LOCATION "/root/trtis/lib/librequest.so"'    >> /root/trtis/cmake/request-config.cmake \
&& echo '                              INTERFACE_INCLUDE_DIRECTORIES "/root/trtis/include")' >> /root/trtis/cmake/request-config.cmake


# START CLION DEBUG
# https://github.com/JetBrains/clion-remote/blob/master/Dockerfile.centos7-cpp-env
# docker build -t openmpf_trtis_detection:clion-debug -f Dockerfile.clion-debug .
# ssh-keygen -f "$HOME/.ssh/known_hosts" -R "[localhost]:2222"

# docker network create clion-debug
# docker run -d --network clion-debug --name trtis_detection_server --env NVIDIA_VISIBLE_DEVICES="" openmpf_trtis_detection_server:latest trtserver --model-store=/models
# docker run -d --network clion-debug --cap-add sys_ptrace -p127.0.0.1:2222:22 openmpf_trtis_detection:clion-debug

# If testing AWS S3 util:
# docker run -d --network clion-debug --name minio --env MINIO_ACCESS_KEY=minio --env MINIO_SECRET_KEY=minio123 minio/minio:latest server /data

# In Clion, go to "Build, Execution, Deployment" -> "Toolchains" -> "Docker"
# Set "CMake" to "/usr/local/bin/cmake".

# In Clion, add the following under "CMake options" for the "Debug-Docker" entry:
# "-DCMAKE_PREFIX_PATH=/home/mpf/mpf-sdk-install/lib/cmake"

# In Clion, go to "Build, Execution, Deployment" -> "Deployment"
# Select "Docker (*)" entry
# Select "Mappings" tab
# Set "Deployment path" to "/home/mpf/clion"

RUN yum -y install openssh-server \
  make \
# Enable next line if building GDB manually
# makeinfo \
  build-essential \
# Enable next line if not building GDB manually
  gdb \
  gcc \
  gcc-c++ \
  clang \
# Enable next line if not building cmake3 manually
# cmake3 \
  rsync \
  tar \
  python \
  xz-utils \
  valgrind \
 && yum clean all

RUN mkdir cmake3-build \
  && cd cmake3-build \
  && curl https://cmake.org/files/v3.16/cmake-3.16.8.tar.gz --output cmake-3.tar.gz \
  && tar -zxvf cmake-3.tar.gz \
  && cd cmake-3.* \
  && ./bootstrap --prefix=/usr/local -- -DCMAKE_USE_OPENSSL=OFF \
  && make -j$(nproc) \
  && make install

#RUN mkdir gdb-build \
#  && cd gdb-build \
#  && curl http://ftp.gnu.org/gnu/gdb/gdb-8.3.tar.xz --output gdb.tar.xz \
#  && tar -xvf gdb.tar.xz \
#  && cd gdb-* \
#  && ./configure --prefix=/usr \
#  && make \
#  && make -C gdb install \
#  && cd .. \
#  && rm -rf gdb-build/

RUN ssh-keygen -A

# Docker ENVs do not work in an SSH connection, so do this:
RUN ( \
    echo 'export TRTIS_SERVER=trtis_detection_server:8001'; \
    echo 'export request_DIR=/root/trtis'; \
  ) >> /etc/profile.d/clion.sh

RUN ( \
    echo 'LogLevel DEBUG2'; \
    echo 'PermitRootLogin yes'; \
    echo 'PasswordAuthentication yes'; \
    echo 'Subsystem sftp /usr/libexec/openssh/sftp-server'; \
  ) > /etc/ssh/sshd_config_test_clion

RUN echo "PermitRootLogin yes" > /etc/ssh/sshd_config \
  && echo "openmpf-pass" | passwd root --stdin

CMD ["/usr/sbin/sshd", "-D", "-e", "-f", "/etc/ssh/sshd_config_test_clion"]
